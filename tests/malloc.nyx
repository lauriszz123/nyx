const HEAP_START: u16 = 0x0200;
const HEAP_END: u16 = 0x0FFF;

struct Block {
  size: u16,
  free: bool,
  next: ptr of Block,
}

const BLOCK_OVERHEAD: u16 = sizeof(Block);

let heap_start: ptr of Block = HEAP_START;
let free_list: ptr of Block = nil;

fn heap_init()
  free_list = HEAP_START;
  free_list.size = HEAP_END - HEAP_START - BLOCK_OVERHEAD;
  free_list.free = true;
  free_list.next = nil;
end

fn malloc(size: u8): ptr
  let current: ptr of Block = free_list;

  while current != nil do
    if current.free and current.size >= size then
      if current.size > size + BLOCK_OVERHEAD then
        let new_block: ptr of Block = current + BLOCK_OVERHEAD + size; 
        new_block.size = current.size - size - BLOCK_OVERHEAD;
        new_block.free = true;
        new_block.next = nil;

        current.size = size;
        current.next = new_block;
      end

      current.free = false;
      return current + BLOCK_OVERHEAD;
    end

    current = current.next;
  end

  return nil;
end

fn free(pointer: ptr)
  if ptr == nil then return end

  let block: ptr of Block = ptr - BLOCK_OVERHEAD;
  block.free = 1;

  let current: ptr of Block = free_list;

  while current != nil and current.next != nil do
    if current.free and current.next.free then
      current.size = current.size + BLOCK_OVERHEAD + current.next.size;
      current.next = current.next.next;
    else
      current = current.next;
    end
  end
end
